This directory contains a subset of the Multiscatter software package,
version 1.2.10 (http://www.met.reading.ac.uk/clouds/multiscatter/)
that has been adapted to use automatic differentiation tools for
adjoint computation. It was used to compare the speed of a
hand-written adjoint code and the automatic differentiation version
from Adept, CppAD, ADOL-C and Sacado in the Hogan (2012) paper. To
compile it you will need all four to be installed - see the Makefile
for how to point to the CppAD, ADOL-C and Sacado header files and the
ADOL-C shared library.  The "main" function is in
multiscatter_ascii.c, while the driver for switching between the four
methods to compute the adjoint is in multiscatter_AD.c.

Type "make" to compile the executable "multiscatter_reduced", which
contains only the original algorithm, the hand-coded adjoint and the
Adept automatic differentiation. Type "make all" to also compile the
executable "multiscatter", which also contains the other AD libraries
provided you have them installed on your system.

You can benchmark the various adjoint computations by running the
script ./benchmark.sh - note that the important output goes to
standard error, so you need to do "./benchmark.sh 2>
benchmark_output.txt" to save it.

PLEASE NOTE

1. The way the original Multiscatter package has been hacked to
include these four codes is not very elegant, but hopefully it is
still useful to illustrate how you might go about applying Adept to
your code.

2. The original algorithm was coded in the C99 standard of C and made
quite extensive use of Variable Length Arrays (VLAs). These are not
part of the C++ standard, but are included in the GNU C++ compiler as
an extension. Some C++ compilers do not support VLAs and will not be
able to compile this code.  You could replace the VLAs by std::vector,
but be aware that then the memory is allocated on the heap rather than
the stack and so the benchmark results may well change.

3. The benchmark results in the Hogan (2012) paper involved editing
usrparms.h in the ADOL-C distribution to increase the memory buffer
size so that it did not write out the tape to a file.

4. To get the memory usage associated with a tape in CppAD I had to
hack the CppAD library.


