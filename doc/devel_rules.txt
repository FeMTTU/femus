SOME RULES FOR DEVELOPING FEMUS - draft

- Use .hpp for header files and .cpp for source files

- Use std::cout, do not use printf for output.

- If a function must be performed by only one processor (processor 0),
then write an ifproc INSIDE the FUNCTION.

- Divide the includes in 
FEMuS includes,
 C++ includes,
 other external libraries' includes.

- Always put include guards in header files.

- Write the function names with CapitalLettersLikeThisAndNotWithUnderscores.

- Try to put the includes EXPLICITLY WHERE THEY HAVE TO BE, 
  and not thinking that somewhere some include will lead me to the file i need...

- In the SCRIPTS, almost all the variables have a FM_ or FEMUS_ prefix.
 The variables without this prefix are like this because 
 they are defined for external packages
 For instance, PETSC_DIR and PETSC_ARCH are used to COMPILE PETSC.
 
 - when you create a NEW HEADER, make sure you change the INCLUDE GUARD.
 Then, make sure you add the new files to git.
 
 - when you change the name of a file, header or source, recompile all the applications
   and make sure that everything compiles correctly.
   
 - when you start a file, put the source code among the "namespace femus"

 - data encapsulation, please
 
##############################
###### APPLICATION ###########
##############################

######## How to SETUP a NEW APPLICATION of the LIBRARY (will do a script probably) #############
- Create a folder in the Applications directory with your main function and your src/header files
- Write the Cmakelists.txt file for it
- Add the reference to the application in the Cmakelists.txt of the package library
- open cmake-gui and run configure and generate
- NOW PAY ATTENTION TO WHAT HAPPENS WHEN YOU ADD SOURCE FILES to the LIBRARY (not to the application)! You have to update the LIST in the src/ cmake file!!! (use ls -1)
- now go to the binary directory and type make to generate the library
- then enter your application folder and run make to generate your executable

######## How to IMPLEMENT A NEW APPLICATION #############
- Follow the examples

###### How to change the mesh file of an application ###########
- Put the mesh file in the input/ directory
- Set the filename in the main file

####### How to schedule a suite of runs ##########
- Script

###### When you change the input file in the repo folder (NOT IN THE BINARY FOLDER) then you have to RERUN CMAKE !!! #############

####### How to RESTART a run of an application ##########
- THE WHOLE RUN is in a single "time" DIRECTORY...
  so to restart we will EXCLUSIVELY READ from THAT DIRECTORY

- Set the folder from which to restart in the file run_to_restart_from
- set the ITERATION NUMBER in the "initial_step" variable in the configuration file IN THE FOLDER OF THE CONSIDERED RUN!
- set the other parameters like "nsteps"

- We must be very careful.
- We must change ALMOST NOTHING
- Do not change NUMBER OF PROCESSORS
- Do not change NUMBER OF LEVELS
- Do not change the OUTPUT FOLDERNAME (of course...)



##################################
###### GIT CHEAT SHEET ###########
##################################

- First golden rule: using the manual never hurts.

- Set name and email in your computer:

  git config --global user.name "Name Surname"
  git config --global user.email "name.surname@example.com"

  To check what configuration you obtained, do 

  git config --list 

  (this shows you more than you see with "git config -e"
  because it also reads other git configuration files,
  such as $HOME/.gitconfig)

- To contribute:
  Create a personal github account 
  Create a fork of the femus repository in your github account
  Clone your fork in your computer
  Work in your computer (do branches, commit changes, ...)
  Push your branches back to your fork 
  Send a pull request to the main femus repository
  The maintainers will decide what to do with the pull request and possibly it will be merged to master
  Periodically, sync the master in the fork with the master in the main femus repository

##################################

WORKFLOW for updating the master in the FORK from the master in the MAIN REPO

In github:

Go in the MAIN REPO

Click on "Pull requests" (on the right)
Click on "New pull request" (green button)
Click on "compare across forks"
The "base fork" is going to be the FORK master branch
The "head fork" is going to be the MAIN master branch
Click on "create pull request"
Add some title for it
Make sure that the branches can be AUTOMATICALLY MERGED (otherwise you have to solve the conflicts using command line...)
Click on "Merge pull request" (you find it by scrolling towards the bottom of the page)
Click on "Confirm merge"

From command line:

To be added

##################################

How to install HDFVIEW

Follow the instruction in the HDFVIEW website

At the end of the build process, you should have an hdfview.sh script inside the bin directory of your build.
You must open that script and change the INSTALLDIR variable with the path of this build (by default, /usr/local is in it)

Another alternative to view the content of an HDF5 file is to use the 'h5dump' utility shipped with HDF5 (installed through PETSc, for instance)
