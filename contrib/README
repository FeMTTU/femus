##############################
###### LIBRARY ###############
##############################

###### LIBRARY FEATURES #########
Integration only with open source software
Closed symulation cycle, from mesh to output
Multiphysics applications
Restart feature


###### How to install ###########




###### How to configure ###########


######## How to choose the COMPILE MODE for the library AND external packages ###########
source configure_femus.sh
fm_set_femus --help

######## IF YOU WANT TO CHANGE the COMPILE MODE ###############
You have to open another shell and set new values 


##############################
###### APPLICATION ###########
##############################

###### How to set the parameters for an application ###########
- See the files in the input/ directory

###### How to change the mesh file of an application ###########
- Put the mesh file in the input/ directory
- Set the filename in the femus_conf.in file
- Set libmesh_gen to 0

###### IF YOU WANT TO REVERT TO LIBMESH-GENERATED MESH ###########
- Set libmesh_gen back to 1
- Don't have to move any mesh file

####### How to schedule a suite of runs ##########
- Folders with time files

####### How to switch from one application to another ##########
- Just change folder. 

####### How to create a new application ##########
- Copy the structure of an existing application, in particular the directories
   and the configuration files
- Define your own Equations, Quantities, Physics and Domain based on the BASE CLASSES provided with the library.   
- Instantiate in the main one object of each of the following types:
  <Gencase>, <Box>, <TimeLoop>, <Utils>, <Files>, <Physics>
  (notice, these are the names of the TYPES, not of the instantiations...
   suppose you want to have more than one instantiation, then you should give DIFFERENT TAGS 
   for each separate instantiation...)
   We should define for each type if they need a RuntimeMap and what parameters they need in it...
   Yeah, in the constructor of such an object we must put the check "if the file isn't there, abort"
   
####### How to RESTART a run of an application ##########
- NOW I AM DOING EVERYTHING IN SUCH A WAY THAT THE WHOLE RUN WILL BE in the OUTTIME/ DIRECTORY... 
  so to restart we will EXCLUSIVELY READ from THAT DIRECTORY

- Set the folder from which to restart in the file run_to_restart_from
- set the ITERATION NUMBER in the "restart" variable in the configuration file IN THE FOLDER OF THE CONSIDERED RUN!
- set the other parameters like "nsteps"

- We must be very careful.
- We must change ALMOST NOTHING
- Do not rerun GENCASE
- Do not change NUMBER OF PROCESSORS
- Do not change NUMBER OF LEVELS
- Do not change the OUTPUT FOLDERNAME

######## How to ADD PARAMETERS to the runtime configuration file ############
- One has to see if these will be LIBRARY parameters or APPLICATION parameters
- In case one wants to add a parameter to the library, one HAS to DOCUMENT what that parameter is used for!
- The idea is that the user DOES NOT ADD PARAMETERS that affect the library, but only he MODIFIES the values.
- The only TAG in which the user can put THE PARAMETERS he WANTS is <Physics> which is fully application-oriented


######## How to SETUP a NEW APPLICATION of the LIBRARY #############
- Create a folder in the Applications directory with your main function and your src/header files
- Write the Cmakelists.txt file for it
- Add the reference to the application in the Cmakelists.txt of the package library
- open cmake-gui and run configure and generate
- NOW PAY ATTENTION TO WHAT HAPPENS WHEN YOU ADD SOURCE FILES to the LIBRARY (not to the application)! You have to update the LIST in the src/ cmake file!!! (use ls -1)
- now go to the binary directory and type make to generate the library
- then enter your application folder and run make to generate your executable

######## Critical part: understand for what parameters in the config file one has to RERUN GENCASE OR NOT #############
